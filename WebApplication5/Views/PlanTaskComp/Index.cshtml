@{
    Layout = @"_LayoutAlignLeft.cshtml";
    bool isAdmin = (bool)ViewData["IsAdmin"];
    bool isKSP = (bool)ViewData["isKSP"];
    bool isGIP = (bool)ViewData["isGIP"];
    bool isHOD = (bool)ViewData["isHOD"];
}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>DHTMLX Gantt</title>
    <link href="https://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.css" rel="stylesheet">
    <style>
        .gantt_grid_head_cell {
        font-weight: 500 !important;
        background-color: #F3F3F3;
        border-right: 1px solid #DFE0E1;
        }

        .gantt_grid_scale .gantt_grid_head_cell {
        white-space: normal !important;
        word-wrap: break-word;
        text-align: center;
        line-height: 1.2;
        padding: 5px;
        }

        /* Вертикальные линии в таблице */
        .gantt_grid .gantt_cell {
        border-right: 1px solid #F0F0F0;
        }

        /* Масштаб страницы */
        body {
        transform: scale(0.9);
        transform-origin: top left;
        width: 111%;
        }

        .holiday {
        background-color: #eaf2ff;
        }

        .weekend {
        background-color: #ececec;
        }

        /* Размер шрифта на странице */
        :root {
        --dhx-gantt-font-size: 12px;
        }

        #top-panel {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        position: relative;
        margin-bottom: 30px;
        font-family: Inter, Helvetica, Arial, sans-serif;
        font-size: 12px;
        font-weight: 500;
        color: #555D63;
        margin-top: 30px;
        margin-left: 20px;
        }

        #left-container {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 30px;
        }

        /* Выбор месяца */
        #monthSelector, #yearSelector {
        font-family: Inter, Helvetica, Arial, sans-serif;
        font-weight: 500;
        width: max-content;
        font-size: 12px;
        color: #555D63;
        border: 1px solid #ccc;
        background-color: #f9f9f9;
        padding: 7px 6px;
        border-radius: 3px;
        }

        #year-month-selector {
        display: flex;
        gap: 15px;
        }

        /* Контейнер легенды */
        #legend-container {
        position: absolute;
        bottom: 0;
        right: 0;
        display: flex;
        flex-direction: column;
        gap: 15px;
        }

        #weekend-legend,
        #holiday-legend {
        display: flex;
        align-items: center;
        }

        .legend-color {
        width: 20px;
        height: 20px;
        border: 1px solid #ccc;
        margin-right: 5px;
        }

        .legend-text {
        margin-left: 7px;
        min-width: 120px;
        display: inline-block;
        }

        #saveButton, #sendButton {
        padding: 10px 20px;
        border: 1px solid #CCCCCC;
        border-radius: 3px;
        background-color: #537CFA; 
        color: #FFFFFF;
        }

        #approveButton, #declineButton {
            padding: 10px 20px;
            border: 1px solid #A9A9A9;
            border-radius: 3px;
            color: #555D63;
            width: 130px;
        }

        #approveButton {
            background-color: #C1ECB0;
        }

        #declineButton {
            background-color: #EC928C;
        }

        #status-box {
        padding: 10px 20px;
        border: 1px solid #CCCCCC;
        border-radius: 3px;
        color: #555D63; 
        font-weight: 600;
        }

        .status-not-sent { 
        background-color: #F4F4F4; /* Статус: Не отправлено */
        }

        .status-in-approval {
            background-color: #FFF1A0; /* Статус: Отправлено на согласование */
        }

        .status-approved {
            background-color: #C1ECB0; /* Статус: Подтверждено (комплект создан) */
        }

        .status-rejected {
        background-color: #EC928C; /* Статус: Отклонено */
        }

        #button-status-container {
        display: flex;
        align-items: center;
        gap: 30px;
        }

        #button-container {
        display: flex;
        gap: 20px;
        margin-right: 10px;
        }

        #dataRes-table-container {
        border-collapse:collapse;
        }

        #dataRes-table {
        border: 1px solid #ccc;
        }

        #dataRes-table th, #dataRes-table td {
        border: 1px, solid #ccc;
        padding: 8px;
        text-align: center;
        font-weight: 500;
        }

        #dataRes-table th {
        background-color: #f4f4f4;
        }

    </style>
</head>
<body>
    <div id="top-panel">  
        <div id="left-container">
            <div id="year-month-selector">
                <select id="yearSelector"></select>
                <select id="monthSelector">
                    <option value="0">Январь</option>
                    <option value="1">Февраль</option>
                    <option value="2">Март</option>
                    <option value="3">Апрель</option>
                    <option value="4">Май</option>
                    <option value="5">Июнь</option>
                    <option value="6">Июль</option>
                    <option value="7">Август</option>
                    <option value="8">Сентябрь</option>
                    <option value="9">Октябрь</option>
                    <option value="10">Ноябрь</option>
                    <option value="11">Декабрь</option>
                </select>
            </div>
            @*Контейнер для таблицы списка сотрудников *@
            <div id="dataRes-table-container">
                <table id="dataRes-table">
                    <thead>
                        <tr>
                            <th id="ResFIO" style="width: 250px">ФИО</th>
                            <th id="TimeBalance" style ="width: 100px">Баланс раб. времени, мес.</th>
                            <th id="PlanTZ" style="width: 100px">Планир. ТЗ, мес.</th>
                        </tr>
                    </thead>
                    <tbody>
                        @* Динамическое добавление строк *@
                    </tbody>
                </table>
            </div>
            <input type="hidden" id="isHOD" value="@isHOD" />
            
            <div id="button-status-container">
                <div id="button-container">
                    @if (isAdmin)
                    {
                        <button id="saveButton">Сохранить</button>
                        <button id="sendButton">Сохранить и отправить на согласование</button>
                    }
                    @if (isHOD)
                    {
                        <button id="approveButton">Согласовать</button>
                        <button id="declineButton">Отклонить</button>
                    }
                </div>
                    <div id="status-box" class="status-not-sent">
                        Не отправлено
                    </div>
            </div>
        </div>
        <div id="legend-container">
            <div id="weekend-legend">
                <div class="legend-color" style="background-color: #ececec;"></div>
                <span class="legend-text">Выходные дни</span>
            </div>
            <div id="holiday-legend">
                <div class="legend-color" style="background-color: #eaf2ff;"></div>
                <span class="legend-text">Праздничные дни</span>
            </div>
        </div>
    </div>

    <div id="GanttChart" style="width: 100%; height: 600px;"></div>
    <script type="text/javascript">

        document.addEventListener('DOMContentLoaded', function () {

            var isAdmin = @isAdmin.ToString().ToLower();
            const isKSP = @Json.Serialize(isKSP);
            const isGIP = @Json.Serialize(isGIP);
            const isHOD = @Json.Serialize(isHOD);

            console.log("isAdmin:", isAdmin);
            console.log("isKSP:", isKSP);
            console.log("isGIP:", isGIP);
            console.log("isHOD:", isHOD);

            var validValues = [0.10, 0.20, 0.25, 0.30, 0.40, 0.50, 1.00]; // Массив допустимых значений для интенсивности выполнения работ
        
            var holidays  = [
                "01-05-2025",
                "02-05-2025",
                "08-05-2025",
                "09-05-2025"
            ]

            var format_date = gantt.date.str_to_date("%d-%m-%Y");

            // Исключение часов в праздничные дни
            for (var i = 0; i < holidays.length; i++) {
                var converted_date = format_date(holidays[i])
                gantt.setWorkTime({date:converted_date, hours:false})
            }

            // Проверка праздничного дня
            function isHoliday(date) {
                var formattedDate = gantt.date.date_to_str("%d-%m-%Y")(date);
                return holidays.indexOf(formattedDate) !== -1;
            }

            // Выделение цветом выходных и праздничных дней недели
            gantt.templates.scale_cell_class = function(date){
                if(!gantt.isWorkTime(date)) {
                    return isHoliday(date) ? "holiday" : "weekend";
                };
            };

            // Выделение выходных и праздничных дней на диаграмме
            gantt.templates.timeline_cell_class = function (item, date) {
                if (!gantt.isWorkTime(date)) {
                    return isHoliday(date) ? "holiday" : "weekend";
                }
            }

            // Конфигурация графика gantt
            gantt.config.row_height = 40;   // Высота строк
            gantt.config.date_format = "%d-%m-%Y";   // Формат даты
            gantt.config.show_grid = true; // Отображение сетки
            gantt.config.work_time = true; // Учет только рабочих дней при расчете длительности
            // gantt.config.resize_rows = true; // Изменение высоты строк в таблице
            gantt.config.sort = true; // Сортировка столбцов
            // gantt.config.order_branch = true; // Перетаскивание задач
            gantt.config.bar_height = 25; // Высота полосок на диаграмме
            gantt.i18n.setLocale("ru"); // Русский язык
            gantt.config.lightbox = false;

            if (isHOD) {
                gantt.config.readonly = true; // Запрет редактирования колонок
            }

            // Дни недели и число
            gantt.config.scales = [
                { unit: "day", step: 1, format: "%D" },
                { unit: "day", step: 1, format: "%d.%m" },
            ]

            gantt.config.scale_height = 50; // Высота шапочки
            gantt.config.min_column_width = 47; // Ширина ячеек сетки диаграммы

            // Запрет создания связей между задачами
            gantt.attachEvent("onBeforeLinkAdd", function(id, link){
                return false;
            })

            // Чтобы на задачной полоске отображался label комплекта, а не key
            gantt.templates.task_text = function(start, end, task) {
                let matchingSet = sets.find(set => String(set.key) === String(task.text));
                return matchingSet ? matchingSet.label : task.text;
            }

            // Предотвращение вызова lightBox при нажатии двойным щелчком в ячейке столбца Итого, ч
            gantt.attachEvent("onBeforeLightBox", function(id) {
            })

            // Список проектов
            var projects = [];

            // Список комплектов
            var sets = [];

            // Функция обновления списка проектов и комплектов
            function updateProjectAndSetOptions(tasks) {
                // Извлечение уникальных проектов из задач
                let uniqueProjects = [];
                let uniqueSets = [];

                tasks.forEach(task => {
                    if (task.project && !uniqueProjects.some(project => project.key === task.project)) {
                        uniqueProjects.push({ key: task.project, label: task.project });
                    }

                    if (task.text && !uniqueSets.some(set => set.key === task.text)) {
                        uniqueSets.push({ key: task.id, label: task.text, project: task.project });
                    }
                });

                // Обновление списка проектов
                projects = uniqueProjects;

                sets = uniqueSets;

                console.log("Обновленные проекты:", projects);
                console.log("Обновленные комплекты:", sets);

                return { projects, sets}
            }

            // Ресурсы (сотрудники)
            var resources = [];

            fetch("/plantaskcomp/api/gantt/resources")
                .then(response => response.json())
                .then(result => {
                
                    resources = result.data;

                    resources.sort((a, b) => a.label.localeCompare(b.label, 'ru', { sensitivity: 'base' }));

                    console.log("Сотрудники:", result.data);

                    gantt.config.columns.forEach(column => {
                        if (column.name === "resources") {
                            column.editor.options = resources;
                        }
                    });
                    gantt.render();
                    calculateTotalHoursForResource(result.data);
                })
            .catch(error => console.error("Ошибка загрузки сотрудников:", error));

            
            // Функция расчета Итого, ч для каждого сотрудника
            function calculateTotalHoursForResource(resources) {

                let resourceHoursMap = {}; // Объект для хранения суммы часов для каждого сотрудника
                let totalTimeBalance = 0; // Сумма колонки Баланс раб времени
                let totalTotalHours = 0; // Сумма колонки Планир. ТЗ

                let selectedMonth = parseInt(document.getElementById("monthSelector").value, 10);
                let selectedYear = parseInt(document.getElementById("yearSelector").value, 10);

                let monthStart = new Date(selectedYear, selectedMonth, 1);
                let monthEnd = new Date(selectedYear, selectedMonth + 1, 0);

                // Функция для вычисления Баланса рабочего времени
                function getTimeBalance(year, month) {
                    var startDate = new Date(year, month, 1);
                    var endDate = new Date(year, month + 1, 0);
                    var workingDays = 0;

                    for (var d = startDate.getDate(); d <= endDate.getDate(); d++) {
                        var currentDate = new Date(year, month, d);
                        var dayOfWeek = currentDate.getDay();

                        // Проверка, является ли день выходным или праздничным
                        if (dayOfWeek !== 0 && dayOfWeek !== 6 && !isHoliday(currentDate)) {
                            workingDays++;
                        }
                    }
                    return workingDays;
                }

                let workingHoursInMonth = getTimeBalance(selectedYear, selectedMonth);
                let totalWorkingHoursInMonth = workingHoursInMonth * 8;

                gantt.eachTask(function(task) {

                    let taskStart = task.start_date;
                    let taskEnd = task.end_date;

                    if (typeof taskStart === "String") {
                        taskStart = gantt.date.str_to_date("%d-%m-%Y")(task.start_date);
                    }

                    if (typeof taskEnd === "String") {
                        taskEnd = gantt.date.str_to_date("%d-%m-%Y")(task.end_date);
                    }

                    // Попадает ли задача в выбранный месяц
                    if (taskStart >= monthStart && taskStart <= monthEnd) {
                        let totalHours = 0;
                        let currentDate = new Date(taskStart);
                        let intensity = task.intensity || 1.00;

                        while (currentDate <= taskEnd) {
                            if (gantt.isWorkTime(currentDate) && !isHoliday(currentDate)) {
                                totalHours += 8 * intensity;
                            }
                            currentDate.setDate(currentDate.getDate() + 1);
                        }

                        let resource = task.resources;
                        if (resource) {

                            // Если ресурса еще нет в объекте, добавление его с начальной суммой 0
                            if (!resourceHoursMap[resource]) {
                                resourceHoursMap[resource] = 0;
                            }

                            // Добавление количества часов для этого ресурса
                            resourceHoursMap[resource] += totalHours;
                        }
                    }
                });

                resources.forEach(resource => {
                    resource.timeBalance = totalWorkingHoursInMonth;
                })
                    
                // Функция заполнения таблицы сотрудников
                function fillResourcesTable(resources) {
                    let tbody = document.querySelector("#dataRes-table tbody");
                    tbody.innerHTML = "";

                    // Проход по всем сотрудникам
                    resources.forEach(resource => {
                        let resourceName = resource.label;
                        let resourceKey = resource.key;
                        let totalHours = resourceHoursMap[resourceKey] || 0; // Получение суммы часов для ресурса, если она есть

                        let timeBalance = resource.timeBalance || 0;

                        // Итого
                        totalTimeBalance += timeBalance;
                        totalTotalHours += totalHours;

                        let backgroundColor = "";
                        if (totalHours < timeBalance) {
                            backgroundColor = "#FFF1A0";
                        } else if (totalHours === timeBalance) {
                            backgroundColor = "#C1ECB0";
                        } else {
                            backgroundColor = "#EC928C";
                        }

                        let row = document.createElement("tr");

                        row.innerHTML = `
                        <td style="text-align: left;"">${resourceName}</td>
                        <td>${resource.timeBalance}</td>
                        <td style="background-color: ${backgroundColor};"><strong>${totalHours}</strong></td>
                        `;

                        tbody.appendChild(row);
                    });
                    // Динамическое добавление строки Итого в конце таблицы
                    let totalRow = document.createElement("tr");

                    let backgroundColor = "";
                    if (totalTotalHours < totalTimeBalance) {
                        backgroundColor = "#FFF1A0";
                    } else if (totalTotalHours === totalTimeBalance) {
                        backgroundColor = "#C1ECB0";
                    } else {
                        backgroundColor = "#EC928C";
                    }

                    totalRow.innerHTML = `
                        <td style="text-align: right;"><strong>ИТОГО</strong></td>
                        <td>${totalTimeBalance}</td>
                        <td style="background-color: ${backgroundColor};"><strong>${totalTotalHours}</strong></td>
                    `;
                    tbody.appendChild(totalRow);
                }
                fillResourcesTable(resources);
            }

            // Обновление таблицы ресурсов при переключении между месяцами
            document.getElementById("monthSelector").addEventListener("change", function() {
                let selectedYear = parseInt(document.getElementById("yearSelector").value, 10);
                calculateTotalHoursForResource(resources);
                updateGanttMonthYear(selectedYear, parseInt(this.value, 10));
                loadTasks(parseInt(this.value, 10), selectedYear);
            })

            // Обновление таблицы ресурсов при переключении между годами
            document.getElementById("yearSelector").addEventListener("change", function() {
                let selectedYear = parseInt(this.value, 10);
                let selectedMonth = parseInt(document.getElementById("monthSelector").value, 10);
                calculateTotalHoursForResource(resources);
                updateGanttMonthYear(selectedYear, selectedMonth);
                loadTasks(selectedMonth, selectedYear);
            })

            // Выполняемые работы
            var work = [];
            fetch("/plantaskcomp/api/gantt/kindofact")
                .then(response => response.json())
                .then(result => {
                    work = result.data;

                    work.sort((a, b) => a.label.localeCompare(b.label, 'ru', { sensitivity: 'base' }));

                    console.log("Работа:", result.data);

                    gantt.config.columns.forEach(column => {
                        if (column.name === "work") {
                            column.editor.options = work;
                        }
                    });
                    gantt.render();
                })
            .catch(error => console.error("Ошибка загрузки работ:", error));

            // Колонки в таблице
            gantt.config.columns = [
                { name: "project", label: "Проект", min_width: 55, align: "center", editor: {type: "select", map_to: "project", options: projects} },
                { name: "text", label: "Комплект", min_width: 150, align: "center", editor: {type: "select", map_to: "text", options: [] }, template: function(task) {
                    // Чтобы в ячейке отображался label комплекта, а не key
                    let matchingSet = sets.find(set => String(set.key) === String(task.text));
                    return matchingSet ? matchingSet.label : task.text;
                } },
                { name: "work", label: "Выполняемая работа", min_width: 150, align: "center", editor: {type: "select", map_to: "work", options: work}, template: function(task) {
                    // Чтобы в ячейке отображался label работы, а не key
                    let matchingWork = work.find(w => String(w.key) === String(task.work));
                    return matchingWork ? matchingWork.label : task.work;
                } },
                { name: "resources", label: "Сотрудник", align: "center", min_width: 150, editor: {type: "select", map_to: "resources", options: resources}, template: function(task) {
                    // Чтобы в ячейке отображался label ресурса, а не key
                    let matchingRes = resources.find(res => String(res.key) === String(task.resources));
                    return matchingRes ? matchingRes.label : task.resources;
                } },
                { name: "start_date", label: "Дата начала", align: "center", min_width: 80, editor: {type: "date", map_to: "start_date"}, template: function(task) {
                    return gantt.date.date_to_str("%d.%m.%Y")(task.start_date);
                } },
                { name: "end_date", label: "Дата окончания", align: "center", min_width: 80, editor: {type: "date", map_to: "end_date"}, template: function(task) {
                    return gantt.date.date_to_str("%d.%m.%Y")(task.end_date);
                } },
                { name: "duration", label: "Длительность", align: "center", min_width: 45, editor: {type: "number", map_to: "duration"} },
                { name: "intensity", label: "Интенсивность", min_width: 48, align: "center", editor: {type: "select", map_to: "intensity", options: validValues.map(value => ({ key: value, label: value.toString() }))} },
                { name: "planned_progress", label: "Планир. % выполнения", min_width: 60, align: "center", editor: {type: "number", map_to: "planned_progress" } },
                { name: "total_hours", label: "Итого, ч", align: "center", min_width: 50, template: function(task) {
                    let duration = task.duration || 0;
                    let intensity = task.intensity || 1.00;
                    return (duration * 8 * intensity);
                }}
            ];

            if (isKSP) {
                gantt.config.columns.push(
                { name: "add_Task", min_width: 35, label: "<div style='text-align:center'><button id='header-add-task-btn' style='border:none; background:none; cursor:pointer; font-size: 28px; font-family: Inter, Helvetica, Arial, sans-serif; color: #9F9FA0;'>+</button></div>", min_width: 44, align: "center", template: function(){
                    return "<button class='add-task-btn' style='border:none; background:none; cursor:pointer; font-size: 28px; font-family: Inter, Helvetica, Arial, sans-serif; color: #9F9FA0;'>+</button>"
                }}, // Колонка для кнопки добавления
                { name: "delete_Task", label: "", min_width: 65, align: "center", template: function(task){
                    return "<button class='delete-task-btn' data-id='" + task.id + "' data-idDb='" + task.idDb + "' style='border:none; background:none; cursor:pointer; font-size: 12px; font-weight: 500; font-family: Inter, Helvetica, Arial, sans-serif; color: #909090; padding: 0; margin: 0'>Удалить</button>"
                }} // Колонка для удаления
                )
            }

            gantt.attachEvent("onAfterTaskUpdate", function (id, task) {
                if (task.project) {
                    updateSetOptions(task);
                }
                if (task.resources || task.duration || task.intensity) {
                    calculateTotalHoursForResource(resources);
                }
                setEndDateToEndOfDay(task);
                recalculateDuration(task);
            });

            function updateSetOptions(task) {
                if (task.project) {
                    let filteredSets = sets.filter(set => set.project === task.project);
                    
                    gantt.config.columns.find(col => col.name === "text").editor.options = filteredSets.map(set => ({ key: set.key, label: set.label }));

                    console.log(`Обрабатываем задачу: ID=${task.id}, Проект=${task.project}`);
                    console.log(`Доступные комплекты:`, filteredSets.map(set => set.label));
                }
            }

            // Правильный перерасчет даты окончания
            function setEndDateToEndOfDay(task) {
                let correctedEndDate = new Date(task.end_date);
                correctedEndDate.setHours(23,59,59,999);
                task.end_date = correctedEndDate;
            }

            // Правильный перерасчет длительности
            function recalculateDuration(task) {
                if (task.start_date && task.end_date) {
                    let startDate = new Date(task.start_date);
                    let endDate = new Date(task.end_date);

                    let workDaysCount = 0;
                    let currentDate = new Date(startDate);

                    while (currentDate <= endDate) {
                        if (gantt.isWorkTime(currentDate) && !isHoliday(currentDate)) {
                            workDaysCount++;
                        }
                        currentDate.setDate(currentDate.getDate() + 1);
                    }

                    task.duration = workDaysCount;
                }
            }

            let lastTaskId = 0;

            // Создание задачи при нажатии на кнопку +
            document.addEventListener("click", function(e) {
                if ((e.target && e.target.classList.contains("add-task-btn")) || (e.target && e.target.id === "header-add-task-btn")) {
                    var selectedMonth = parseInt(document.getElementById("monthSelector").value, 10);
                    var selectedYear = parseInt(document.getElementById("yearSelector").value, 10);
                    var taskStartDate = new Date(selectedYear, selectedMonth, 1);

                    lastTaskId++;

                    var newTask = {
                        id: lastTaskId,
                        idDb: 0,
                        project: "",
                        text: "",
                        work: "",
                        resources: "",
                        start_date: gantt.date.date_to_str("%d-%m-%Y")(taskStartDate),
                        duration: 1,
                        intensity: 1.00,
                        planned_progress: 100
                    };
                    gantt.addTask(newTask);
                    setEndDateToEndOfDay(newTask);
                    recalculateDuration(newTask);
                    gantt.render();
                }
            });

            // Удаление задачи при нажатии на кнопку Удалить
            document.addEventListener("click", function(e) {
                if (e.target && e.target.classList.contains("delete-task-btn")) {

                    // Получение внутреннего Id задачи и Id из бд
                    var taskId = e.target.getAttribute('data-id');
                    var taskIdDb = e.target.getAttribute('data-idDb');
                    gantt.message({
                        text: "Вы уверены, что хотите удалить эту задачу?",
                        type: "confirm",
                        callback: function(result) {
                            if (result) {
                                // Если задача еще не сохранена в бд, но добавлена в таблицу
                                if (parseInt(taskIdDb, 10) == 0) {
                                    gantt.deleteTask(taskId);
                                    calculateTotalHoursForResource(resources);
                                    console.log(`Задача с IdDb ${taskIdDb} успешно удалена`);
                                } else {
                                    fetch(`/plantaskcomp/DeleteTask`, {
                                    method: 'POST',
                                    headers: {
                                        "Content-Type": "application/json"
                                    },
                                    body: JSON.stringify({ idDb: taskIdDb })
                                })
                                .then(response => {
                                    if (response.ok) {
                                        gantt.deleteTask(taskIdDb);
                                        calculateTotalHoursForResource(resources);
                                        console.log(`Задача с IdDb ${taskIdDb} успешно удалена`);
                                    } else {
                                    console.error('Ошибка при удалении задачи с сервера');
                                    }
                                })
                                .catch(error => {
                                    console.error('Ошибка при удалении задачи:', error);
                                });
                                }
                            }
                        }
                    })
                }
            })

            // Кнопка Сохранить
            var saveButton = document.getElementById("saveButton");
            if (saveButton) {
                saveButton.addEventListener("click", SaveTasks);
            }

            // Кнопка Отправить на согласование
            var sendButton = document.getElementById("sendButton");
            if (sendButton) {
                sendButton.addEventListener("click", SaveAndSendTasks);
            }
            
            // Кнопка Согласовать
            var approveButton = document.getElementById("approveButton");
            if (approveButton) {
                approveButton.addEventListener("click", function () {
                    UpdateStatusTasks(Confirmed);
                }) 
            }

            // Кнопка Отклонить
            var declineButton = document.getElementById("declineButton");
            if (declineButton) {
                declineButton.addEventListener("click", function () {
                    UpdateStatusTasks(Declined);
                })
            }

            // Обновление статуса в зависимости от принятого решения
            function UpdateStatusTasks(Status) {

            }

            // Сохранение задач
            function SaveTasks() {
                // Получение текущего пользователя
                fetch('/plantaskcomp/api/currentuserid')
                    .then(response => response.json())
                    .then(data => {
                        let currentUserId = data.userId;
                        let tasklist = [];
                    
                        gantt.eachTask(function(task) {
                        let calculatedEndDate = null;
                        if (task.start_date && task.duration) {
                                calculatedEndDate = gantt.calculateEndDate(task.start_date, task.duration);
                                calculatedEndDate.setDate(calculatedEndDate.getDate() - 1);
                        }

                        tasklist.push({
                            id: task.id,
                            idDb: task.idDb,
                            taskCompId: task.text,
                            kindofactId: task.work,
                            startPlanDate: gantt.date.date_to_str("%Y-%m-%d")(task.start_date),
                            finishPlanDate: gantt.date.date_to_str("%Y-%m-%d")(calculatedEndDate),
                            intensity: task.intensity,
                            percent: task.planned_progress,
                            executerId: task.resources,
                            authorId: currentUserId
                        });
                    })

                    console.log("Отправляемые данные для сохранения:", JSON.stringify(tasklist, null, 2));
                
                    fetch('/PlanTaskComp/SaveTasks', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(tasklist),
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Успешно!');
                            location.reload(); // Обновление страницы после сохранения
                        } else {
                            alert("Ошибка: " + data.message);
                        }
                    })
                    .catch(error => {
                        console.error("Ошибка при сохранении данных:", error);
                        alert("Ошибка при сохранении данных:", error);
                    })
                })
                .catch(error => console.error("Ошибка при получении Id пользователя:", error));   
            }

            // Сохранение и отправка на согласование
            function SaveAndSendTasks() {
                // Получение текущего пользователя
                fetch('/plantaskcomp/api/currentuserid')
                    .then(response => response.json())
                    .then(data => {
                        let currentUserId = data.userId;
                        let tasklist = [];

                        gantt.eachTask(function(task) {
                        let calculatedEndDate = null;
                        if (task.start_date && task.duration) {
                                calculatedEndDate = gantt.calculateEndDate(task.start_date, task.duration);
                                calculatedEndDate.setDate(calculatedEndDate.getDate() - 1);
                        }

                        tasklist.push({
                            id: task.id,
                            idDb: task.idDb,
                            taskCompId: task.text,
                            kindofactId: task.work,
                            startPlanDate: gantt.date.date_to_str("%Y-%m-%d")(task.start_date),
                            finishPlanDate: gantt.date.date_to_str("%Y-%m-%d")(calculatedEndDate),
                            intensity: task.intensity,
                            percent: task.planned_progress,
                            executerId: task.resources,
                            authorId: currentUserId
                        });
                    })

                    console.log("Отправляемые данные для сохранения и отправки на согласование:", JSON.stringify(tasklist, null, 2));

                    fetch('/PlanTaskComp/SendToApprove', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(tasklist),
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert('Успешно!');
                            location.reload(); // Обновление страницы после сохранения
                            // Изменение статуса 
                            // document.getElementById("status-box").className = "status-in-approval";
                            // document.getElementById("status-box").innerText = "На согласовании";
                        } else {
                            alert("Ошибка: " + data.message);
                        }
                    })
                    .catch(error => {
                        console.error("Ошибка при сохранении и отправки данных на согласование:", error);
                        alert("Ошибка при сохранении и отправки данных на согласование:", error);
                    })
                })
                .catch(error => console.error("Ошибка при получении Id пользователя:", error));
            }

            // Выбор года (текущий + следующий)
            let yearSelector = document.getElementById("yearSelector");

            let curYear = new Date().getFullYear();
            let savedYear = localStorage.getItem("selectedYear");
            savedYear = savedYear ? parseInt(savedYear, 10) : curYear; // Если сохраненного года нет, то устанавливается текущий

            yearSelector.innerHTML = "";

            for (let i = 0; i < 2; i++) {
                let option = document.createElement("option");
                option.value = curYear + i;
                option.textContent = curYear + i;
                yearSelector.appendChild(option);
            }

            // Выбор сохраненного года
            yearSelector.value = savedYear;

            let monthSelector = document.getElementById("monthSelector");

            // Получение начала и конца месяца
            function getMonthStartEnd(year, month) {
                var startDate = new Date(year, month, 1);
                var endDate = new Date(year, month + 1, 0); // Для получения последнего дня месяца используется день "0" следующего месяца
                return { start: startDate, end: endDate};
            }

            // Восстановаление выбранного месяца при загрузке страницы
            var savedMonth = localStorage.getItem('selectedMonth');
            savedMonth = savedMonth !== null ? parseInt(savedMonth, 10) : currentMonth; // Если сохраненного месяца нет, то устанавливается текущий
            monthSelector.value = savedMonth;

            // Обновление отображения диграммы на выбранный месяц и год
            function updateGanttMonthYear(year, month) { 
                const { start, end } = getMonthStartEnd(year, month);
                gantt.config.start_date = start;
                gantt.config.end_date = end;
                gantt.config.min_date = start;
                gantt.config.max_date = end;

                gantt.render();
            }

            // Установка начальных параметров
            updateGanttMonthYear(savedYear, savedMonth);

            // Обработчик изменения месяца
            monthSelector.addEventListener("change", function() {
                let selectedMonth = parseInt(this.value, 10);
                let selectedYear = parseInt(yearSelector.value, 10);

                localStorage.setItem('selectedMonth', selectedMonth); // Сохранение выбранного месяца
                updateGanttMonthYear(selectedYear, selectedMonth);
                loadTasks(selectedMonth, selectedYear);
            })

            // Обработчик изменения года
            yearSelector.addEventListener("change", function() {
                let selectedYear = parseInt(this.value, 10);
                let selectedMonth = parseInt(monthSelector.value, 10);

                localStorage.setItem('selectedYear', selectedYear); // Сохранение выбранного года
                updateGanttMonthYear(selectedYear, selectedMonth);
                loadTasks(selectedMonth, selectedYear);
            })
 
            // Получение выбранного месяца и года
            function getSelectedMonthAndYear() {
                const selectedMonth = parseInt(document.getElementById("monthSelector").value, 10);
                const selectedYear = parseInt(document.getElementById("yearSelector").value, 10);
                return { selectedMonth, selectedYear };
            }

            // Вызов функции для получения статуса при изменении месяца или года
            document.getElementById("monthSelector").addEventListener("change", getStatus);
            document.getElementById("yearSelector").addEventListener("change", getStatus);

            // Функция получения статуса согласования
            function getStatus() {
                const { selectedMonth, selectedYear } = getSelectedMonthAndYear();

                console.log("Отправляемый год и месяц для получения статуса:", {
                    planMonth: selectedMonth + 1,
                    planYear: selectedYear
                });

                fetch(`/plantaskcomp/api/gantt/getcurstatus?planMonth=${selectedMonth + 1}&planYear=${selectedYear}`)
                    .then(response => response.json())
                    .then(data => {
                        const status = data.data;
                        console.log("Текущий статус:", status);
                        updateStatusBox(status);
                    })
                    .catch(error => {
                        console.error("Ошибка при получении статуса:", error);
                    });
            }

            function updateStatusBox(status) {
                const statusBox = document.getElementById("status-box");
                statusBox.classList.remove("status-not-sent", "status-in-approval", "status-approved", "status-rejected"); // Сначала очистка

                switch (status) {
                    case "Новый":
                        statusBox.textContent = "Не отправлено"
                        statusBox.classList.add("status-not-sent");
                        break;
                    case "Отправлено на согласование":
                        statusBox.textContent = "Отправлено на согласование"
                        statusBox.classList.add("status-in-approval");
                        break;
                    case "Подтверждено (комплект создан)":
                        statusBox.textContent = "Подтверждено (комплект создан)"
                        statusBox.classList.add("status-approved");
                        break;
                    case "Отклонено":
                        statusBox.textContent = "Отклонено"
                        statusBox.classList.add("status-rejected");
                        break;
                }
            }

            getStatus();

            // Получение задач для загрузки проектов и комплектов
            async function loadSetsAndProjects() {
                try {
                    const response = await fetch("/plantaskcomp/api/gantt/tasks");
                    const result = await response.json()
                    var tasks = result.data;
                    const updatedData = updateProjectAndSetOptions(tasks);

                    gantt.config.columns.forEach(column => {
                        if (column.name === "project") {
                            column.editor.options = updatedData.projects;
                        }
                        if (column.name === "text") {
                            column.editor.options = updatedData.sets;
                        }
                    });
                    gantt.render();
                } catch(error) { 
                    console.error("Ошибка загрузки комплектов и проектов:", error);
                }
            }

            // Загрузка задач
            async function loadTasks(selectedMonth, selectedYear) {

                if (isNaN(selectedMonth) || selectedMonth < 0 || selectedMonth > 11) {
                    console.error("Неверный месяц:", selectedMonth);
                    return;
                }

                // Получение начальной и конечной даты для выбранного месяца
                const { start, end } = getMonthStartEnd(selectedYear, selectedMonth);
                console.log(`Загружаем задачи за месяц: ${selectedMonth + 1}-${selectedYear} (с ${start.toLocaleDateString()} по ${end.toLocaleDateString()})`);
 
                try {
                    const response = await fetch(`/plantaskcomp/api/gantt/plantaskcomp?planMonth=${selectedMonth + 1}&planYear=${selectedYear}`);
                    const result = await response.json();
                    let tasks = result.data;
                    console.log('Полученные задачи из базы данных:', tasks);

                    let ganttTasks = tasks.map(task => {

                        // Разбор даты вручную
                        const parseDate = (dateStr) => {
                            if (!dateStr) return null;
                            const [day, month, year] = dateStr.split("-").map(Number);
                            return new Date(year, month - 1, day);
                        }

                        const startDate = parseDate(task.startPlanDate);
                        const endDate = parseDate(task.finishPlanDate);

                        // Форматирование даты в день-месяц-год
                        const formatDate = (date) => {
                            if (!date) return "";
                            const day = String(date.getDate()).padStart(2, '0');
                            const month = String(date.getMonth() + 1).padStart(2, '0');
                            const year = date.getFullYear();
                            return `${day}-${month}-${year}`;
                        };

                        // Поиск taskCompId в массиве sets и установка project
                        let foundSet = sets.find(set => set.key === task.taskCompId);
                        let projectValue = foundSet ? foundSet.project : null;

                        return {
                            id: task.idDb,
                            idDb: task.idDb,
                            text: task.taskCompId,
                            work: task.kindofactId,
                            resources: task.executerId,
                            start_date: formatDate(startDate),
                            end_date: formatDate(endDate),
                            authorId: task.authorId,
                            intensity: task.intensity,
                            planned_progress: task.percent,
                            project: projectValue
                        }
                    });
                    gantt.clearAll();

                    gantt.parse({ data: ganttTasks });
                    
                    ganttTasks.forEach(task => {
                        updateSetOptions(task);
                        setEndDateToEndOfDay(task);
                        recalculateDuration(task);
                        gantt.updateTask(task.id);
                    })

                    console.log('Задачи для диаграммы:', ganttTasks);
                }
                catch(error) {
                    console.error("Ошибка загрузки задач:", error);
                }
            }
            
            async function loadData() {
                try {
                    // Сначала загрузка комплектов и проектов, затем - задач
                    await loadSetsAndProjects();

                    let savedMonth = localStorage.getItem('selectedMonth');
                    savedMonth = savedMonth !== null ? parseInt(savedMonth, 10) : currentMonth;

                    let savedYear =  localStorage.getItem('selectedYear');
                    savedYear = savedYear !== null ? parseInt(savedYear, 10) : new Date().getFullYear();

                    document.getElementById("monthSelector").value = savedMonth;
                    document.getElementById("yearSelector").value = savedYear;

                    await loadTasks(savedMonth, savedYear);
                   
                } catch (error) {
                    console.error("Ошибка загрузки данных:", error);
                }
            }
            
            loadData();

            gantt.init("GanttChart");
        });
    </script>

    <script src="https://cdn.dhtmlx.com/gantt/edge/dhtmlxgantt.js"></script>
</body>
</html>